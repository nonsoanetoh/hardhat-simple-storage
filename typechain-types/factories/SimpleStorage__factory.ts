/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SimpleStorage, SimpleStorageInterface } from "../SimpleStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "callPrivatePureFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "s1",
        type: "string",
      },
      {
        internalType: "string",
        name: "s2",
        type: "string",
      },
    ],
    name: "compareTwoStrings",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_age",
        type: "uint8",
      },
    ],
    name: "createPerson",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "favouriteNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "nameToAge",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "people",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "age",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "retrieve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_favouriteNumber",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "viewFunction",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ab4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637313e8dd116100665780637313e8dd1461012057806390c3ee4d1461013c5780639e7a13ad1461016c578063ed36b3d81461019d578063ef01a9a8146101bb57610093565b806321b204d5146100985780632e64cec1146100c857806343ede4ae146100e65780636057361d14610104575b600080fd5b6100b260048036038101906100ad9190610661565b6101eb565b6040516100bf9190610732565b60405180910390f35b6100d06101fd565b6040516100dd919061076d565b60405180910390f35b6100ee610206565b6040516100fb919061076d565b60405180910390f35b61011e600480360381019061011991906107b4565b61020c565b005b61013a6004803603810190610135919061081a565b610216565b005b61015660048036038101906101519190610661565b6102da565b6040516101639190610885565b60405180910390f35b610186600480360381019061018191906107b4565b610310565b6040516101949291906108a0565b60405180910390f35b6101a56103d9565b6040516101b2919061076d565b60405180910390f35b6101d560048036038101906101d091906108d0565b6103e2565b6040516101e29190610963565b60405180910390f35b60606101f68261043b565b9050919050565b60008054905090565b60005481565b8060008190555050565b600060405180604001604052808481526020018360ff1681525090506001819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908051906020019061027a929190610464565b5060208201518160010160006101000a81548160ff021916908360ff1602179055505050816002846040516102af91906109ba565b908152602001604051809103902060006101000a81548160ff021916908360ff160217905550505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6001818154811061032057600080fd5b906000526020600020906002020160009150905080600001805461034390610a00565b80601f016020809104026020016040519081016040528092919081815260200182805461036f90610a00565b80156103bc5780601f10610391576101008083540402835291602001916103bc565b820191906000526020600020905b81548152906001019060200180831161039f57829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b60008054905090565b6000816040516020016103f591906109ba565b604051602081830303815290604052805190602001208360405160200161041c91906109ba565b6040516020818303038152906040528051906020012014905092915050565b60608160405160200161044e9190610a58565b6040516020818303038152906040529050919050565b82805461047090610a00565b90600052602060002090601f01602090048101928261049257600085556104d9565b82601f106104ab57805160ff19168380011785556104d9565b828001600101855582156104d9579182015b828111156104d85782518255916020019190600101906104bd565b5b5090506104e691906104ea565b5090565b5b808211156105035760008160009055506001016104eb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61056e82610525565b810181811067ffffffffffffffff8211171561058d5761058c610536565b5b80604052505050565b60006105a0610507565b90506105ac8282610565565b919050565b600067ffffffffffffffff8211156105cc576105cb610536565b5b6105d582610525565b9050602081019050919050565b82818337600083830152505050565b60006106046105ff846105b1565b610596565b9050828152602081018484840111156106205761061f610520565b5b61062b8482856105e2565b509392505050565b600082601f8301126106485761064761051b565b5b81356106588482602086016105f1565b91505092915050565b60006020828403121561067757610676610511565b5b600082013567ffffffffffffffff81111561069557610694610516565b5b6106a184828501610633565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106e45780820151818401526020810190506106c9565b838111156106f3576000848401525b50505050565b6000610704826106aa565b61070e81856106b5565b935061071e8185602086016106c6565b61072781610525565b840191505092915050565b6000602082019050818103600083015261074c81846106f9565b905092915050565b6000819050919050565b61076781610754565b82525050565b6000602082019050610782600083018461075e565b92915050565b61079181610754565b811461079c57600080fd5b50565b6000813590506107ae81610788565b92915050565b6000602082840312156107ca576107c9610511565b5b60006107d88482850161079f565b91505092915050565b600060ff82169050919050565b6107f7816107e1565b811461080257600080fd5b50565b600081359050610814816107ee565b92915050565b6000806040838503121561083157610830610511565b5b600083013567ffffffffffffffff81111561084f5761084e610516565b5b61085b85828601610633565b925050602061086c85828601610805565b9150509250929050565b61087f816107e1565b82525050565b600060208201905061089a6000830184610876565b92915050565b600060408201905081810360008301526108ba81856106f9565b90506108c96020830184610876565b9392505050565b600080604083850312156108e7576108e6610511565b5b600083013567ffffffffffffffff81111561090557610904610516565b5b61091185828601610633565b925050602083013567ffffffffffffffff81111561093257610931610516565b5b61093e85828601610633565b9150509250929050565b60008115159050919050565b61095d81610948565b82525050565b60006020820190506109786000830184610954565b92915050565b600081905092915050565b6000610994826106aa565b61099e818561097e565b93506109ae8185602086016106c6565b80840191505092915050565b60006109c68284610989565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a1857607f821691505b60208210811415610a2c57610a2b6109d1565b5b50919050565b7f48656c6c6f200000000000000000000000000000000000000000000000000000815250565b6000610a6382610a32565b600682019150610a738284610989565b91508190509291505056fea264697066735822122086d9aa401f553f6727010e1bccb8f3dddb7197946a4c18d0898ba4aec111beb564736f6c634300080c0033";

type SimpleStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleStorage__factory extends ContractFactory {
  constructor(...args: SimpleStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleStorage> {
    return super.deploy(overrides || {}) as Promise<SimpleStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleStorage {
    return super.attach(address) as SimpleStorage;
  }
  override connect(signer: Signer): SimpleStorage__factory {
    return super.connect(signer) as SimpleStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleStorageInterface {
    return new utils.Interface(_abi) as SimpleStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleStorage {
    return new Contract(address, _abi, signerOrProvider) as SimpleStorage;
  }
}
